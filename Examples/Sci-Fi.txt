import bpy
mat = bpy.data.materials.new(name = "Sci-Fi")
mat.use_nodes = True
def sci_fi_node_group():

    sci_fi = mat.node_tree
    for node in sci_fi.nodes:
        sci_fi.nodes.remove(node)
    
    material_output = sci_fi.nodes.new("ShaderNodeOutputMaterial")
    material_output.name = "Material Output"
    material_output.is_active_output = True
    material_output.target = 'ALL'
    material_output.inputs[2].default_value = (0.0, 0.0, 0.0)
    material_output.inputs[3].default_value = 0.0
    
    displacement = sci_fi.nodes.new("ShaderNodeDisplacement")
    displacement.name = "Displacement"
    displacement.space = 'OBJECT'
    displacement.inputs[1].default_value = 0.300
    displacement.inputs[2].default_value = 0.100
    displacement.inputs[3].default_value = (0.0, 0.0, 0.0)
    
    bump = sci_fi.nodes.new("ShaderNodeBump")
    bump.name = "Bump"
    bump.invert = False
    bump.inputs[0].default_value = 0.500
    bump.inputs[1].default_value = 1.0
    
    color_ramp = sci_fi.nodes.new("ShaderNodeValToRGB")
    color_ramp.name = "Color Ramp"
    color_ramp.color_ramp.color_mode = 'RGB'
    color_ramp.color_ramp.hue_interpolation = 'NEAR'
    color_ramp.color_ramp.interpolation = 'EASE'
    
    color_ramp.color_ramp.elements.remove(color_ramp.color_ramp.elements[0])
    color_ramp_cre_0 = color_ramp.color_ramp.elements[0]
    color_ramp_cre_0.position = 0.0
    color_ramp_cre_0.alpha = 1.0
    color_ramp_cre_0.color = (0.0, 0.0, 0.0, 1.0)

    color_ramp_cre_1 = color_ramp.color_ramp.elements.new(0.292)
    color_ramp_cre_1.alpha = 1.0
    color_ramp_cre_1.color = (1.0, 1.0, 1.0, 1.0)

    color_ramp_cre_2 = color_ramp.color_ramp.elements.new(0.623)
    color_ramp_cre_2.alpha = 1.0
    color_ramp_cre_2.color = (0.0, 0.0, 0.0, 1.0)

    
    mapping = sci_fi.nodes.new("ShaderNodeMapping")
    mapping.name = "Mapping"
    mapping.vector_type = 'POINT'
    mapping.inputs[1].default_value = (0.0, 0.0, 0.0)
    mapping.inputs[2].default_value = (0.0, 0.0, 0.0)
    mapping.inputs[3].default_value = (1.0, 1.0, 1.0)
    
    texture_coordinate = sci_fi.nodes.new("ShaderNodeTexCoord")
    texture_coordinate.name = "Texture Coordinate"
    texture_coordinate.from_instancer = False
    
    invert_color = sci_fi.nodes.new("ShaderNodeInvert")
    invert_color.name = "Invert Color"
    invert_color.inputs[0].default_value = 1.0
    
    noise_texture = sci_fi.nodes.new("ShaderNodeTexNoise")
    noise_texture.name = "Noise Texture"
    noise_texture.noise_dimensions = '3D'
    noise_texture.noise_type = 'FBM'
    noise_texture.normalize = True
    noise_texture.inputs[1].default_value = 0.0
    noise_texture.inputs[3].default_value = 15.0
    noise_texture.inputs[4].default_value = 0.5
    noise_texture.inputs[5].default_value = 2.0
    noise_texture.inputs[6].default_value = 0.0
    noise_texture.inputs[7].default_value = 1.0
    noise_texture.inputs[8].default_value = 2.0
    
    voronoi_texture = sci_fi.nodes.new("ShaderNodeTexVoronoi")
    voronoi_texture.name = "Voronoi Texture"
    voronoi_texture.distance = 'EUCLIDEAN'
    voronoi_texture.normalize = False
    voronoi_texture.voronoi_dimensions = '4D'
    voronoi_texture.inputs[0].default_value = (0.0, 0.0, 0.0)
    voronoi_texture.inputs[1].default_value = 0.0
    voronoi_texture.inputs[2].default_value = 1.5
    voronoi_texture.inputs[3].default_value = 0.0
    voronoi_texture.inputs[4].default_value = 1.0
    voronoi_texture.inputs[5].default_value = 2.0
    voronoi_texture.inputs[6].default_value = 0.050
    voronoi_texture.inputs[7].default_value = 1.0
    voronoi_texture.inputs[8].default_value = 0.540
    
    principled_bsdf = sci_fi.nodes.new("ShaderNodeBsdfPrincipled")
    principled_bsdf.name = "Principled BSDF"
    principled_bsdf.distribution = 'MULTI_GGX'
    principled_bsdf.subsurface_method = 'RANDOM_WALK_SKIN'
    principled_bsdf.inputs[1].default_value = 0.0
    principled_bsdf.inputs[3].default_value = 1.500
    principled_bsdf.inputs[4].default_value = 1.0
    principled_bsdf.inputs[6].default_value = 0.0
    principled_bsdf.inputs[7].default_value = 1.0
    principled_bsdf.inputs[8].default_value = (0.0, 0.0, 0.0)
    principled_bsdf.inputs[9].default_value = 0.030
    principled_bsdf.inputs[10].default_value = 1.400
    principled_bsdf.inputs[11].default_value = 0.0
    principled_bsdf.inputs[12].default_value = 0.5
    principled_bsdf.inputs[13].default_value = (1.0, 1.0, 1.0, 1.0)
    principled_bsdf.inputs[14].default_value = 0.0
    principled_bsdf.inputs[15].default_value = 0.0
    principled_bsdf.inputs[16].default_value = (0.0, 0.0, 0.0)
    principled_bsdf.inputs[17].default_value = 0.024
    principled_bsdf.inputs[18].default_value = 0.0
    principled_bsdf.inputs[19].default_value = 0.030
    principled_bsdf.inputs[20].default_value = 1.5
    principled_bsdf.inputs[21].default_value = (1.0, 1.0, 1.0, 1.0)
    principled_bsdf.inputs[22].default_value = (0.0, 0.0, 0.0)
    principled_bsdf.inputs[23].default_value = 0.0
    principled_bsdf.inputs[24].default_value = 0.5
    principled_bsdf.inputs[25].default_value = (1.0, 1.0, 1.0, 1.0)
    principled_bsdf.inputs[26].default_value = (1.0, 1.0, 1.0, 1.0)
    principled_bsdf.inputs[27].default_value = 0.0
    
    
    
    
    sci_fi.links.new(voronoi_texture.outputs[0], color_ramp.inputs[0])
    sci_fi.links.new(mapping.outputs[0], voronoi_texture.inputs[0])
    sci_fi.links.new(texture_coordinate.outputs[0], mapping.inputs[0])
    sci_fi.links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])
    sci_fi.links.new(noise_texture.outputs[0], invert_color.inputs[1])
    sci_fi.links.new(invert_color.outputs[0], bump.inputs[2])
    sci_fi.links.new(bump.outputs[0], principled_bsdf.inputs[5])
    sci_fi.links.new(principled_bsdf.outputs[0], material_output.inputs[0])
    sci_fi.links.new(displacement.outputs[0], material_output.inputs[1])
    sci_fi.links.new(voronoi_texture.outputs[0], displacement.inputs[0])
    return sci_fi

sci_fi = sci_fi_node_group()
